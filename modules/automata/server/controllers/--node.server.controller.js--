'use strict';

/**
 * Module dependencies.
 */
//console.log(Node);
var path = require('path'),
  mongoose = require('mongoose'),
  StateNode = mongoose.model('StateNode'),
  errorHandler = require(path.resolve('./modules/core/server/controllers/errors.server.controller'));

//console.log(Node);

/**
 * Create a article
 */
exports.create = function (req, res) {
  var node = new StateNode(req.body);
  //automaton.user = req.user;

  node.save(function (err) {
    if (err) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(err)
      });
    } else {
      res.json(node);
    }
  });
};

/**
 * Show the current automaton
 */
exports.read = function (req, res) {
  res.json(req.node);
};

/**
 * Update a automaton
 */
exports.update = function (req, res) {
  var node = req.node;
  console.log(node);
  //automaton.title = req.body.title;
  //automaton.content = req.body.content;

  node.save(function (err) {
    if (err) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(err)
      });
    } else {
      res.json(node);
    }
  });
};

/**
 * Delete an article
 */
exports.delete = function (req, res) {
  var node = req.node;

  node.remove(function (err) {
    if (err) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(err)
      });
    } else {
      res.json(node);
    }
  });
};

/**
 * List of Automata

exports.list = function (req, res) {
  Automaton.find().sort('-created').populate('user', 'displayName').exec(function (err, automata) {
    if (err) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(err)
      });
    } else {
      res.json(automata);
    }
  });
};
*/

/**
 * Automaton middleware
 */
exports.nodeByID = function (req, res, next, id) {

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).send({
      message: 'Node is invalid'
    });
  }

  Node.findById(id).populate('user', 'displayName').exec(function (err, node) {
    if (err) {
      return next(err);
    } else if (!node) {
      return res.status(404).send({
        message: 'No node with that identifier has been found'
      });
    }
    req.node = node;
    next();
  });
};
